class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        stack = []
        ret = 0
        for t in range(len(grid)):
            for k in range(len(grid[0])):
                if grid[t][k] == '1':
                    ret += 1
                    grid[t][k] = '0'
                    stack = [(t, k)]
                    while stack:
                        i, j = stack.pop(0)
                        if i+1 < len(grid) and grid[i+1][j] == '1':
                            stack.append((i+1, j))
                            grid[i+1][j] = '0'
                        if j+1 < len(grid[0]) and grid[i][j+1] == '1':
                            stack.append((i, j+1))
                            grid[i][j+1] = '0'
                        if i-1 >= 0 and grid[i-1][j] == '1':
                            stack.append((i-1, j))
                            grid[i-1][j] = '0'
                        if j-1 >= 0 and grid[i][j-1] == '1':
                            stack.append((i, j-1))
                            grid[i][j-1] = '0'
        return ret


Solution().numIslands([
[
"0",
"1",
"0",
"0",
"1",
"1",
"1",
"0",
"0",
"0",
"0",
"0",
"1",
"0",
"0",
"0",
"0",
"1",
"0",
"1"
],
[
"1",
"0",
"1",
"0",
"0",
"1",
"1",
"0",
"0",
"1",
"0",
"1",
"0",
"1",
"0",
"1",
"1",
"0",
"0",
"0"
],
[
"0",
"1",
"0",
"0",
"0",
"1",
"1",
"1",
"1",
"0",
"0",
"0",
"0",
"0",
"1",
"1",
"1",
"1",
"0",
"1"
],
[
"1",
"1",
"0",
"0",
"0",
"1",
"1",
"0",
"0",
"0",
"1",
"1",
"1",
"0",
"0",
"1",
"0",
"1",
"1",
"0"
],
[
"0",
"1",
"0",
"1",
"1",
"0",
"1",
"0",
"0",
"0",
"1",
"0",
"0",
"1",
"0",
"0",
"0",
"0",
"0",
"1"
],
[
"1",
"0",
"0",
"1",
"0",
"1",
"0",
"0",
"0",
"1",
"1",
"0",
"1",
"0",
"0",
"1",
"0",
"0",
"0",
"0"
],
[
"1",
"0",
"0",
"0",
"1",
"1",
"0",
"0",
"0",
"0",
"0",
"1",
"0",
"0",
"1",
"0",
"0",
"0",
"0",
"1"
],
[
"1",
"0",
"0",
"0",
"1",
"0",
"1",
"1",
"1",
"0",
"1",
"0",
"1",
"1",
"1",
"1",
"0",
"0",
"0",
"1"
],
[
"1",
"0",
"0",
"1",
"0",
"0",
"0",
"1",
"0",
"0",
"0",
"0",
"0",
"0",
"0",
"0",
"0",
"1",
"0",
"1"
],
[
"0",
"0",
"0",
"1",
"0",
"1",
"1",
"1",
"1",
"1",
"1",
"1",
"1",
"1",
"0",
"0",
"0",
"0",
"1",
"0"
],
[
"1",
"0",
"1",
"0",
"1",
"0",
"0",
"1",
"1",
"1",
"0",
"1",
"1",
"0",
"0",
"1",
"1",
"0",
"0",
"0"
],
[
"0",
"1",
"0",
"0",
"1",
"0",
"0",
"0",
"0",
"0",
"0",
"1",
"1",
"1",
"1",
"0",
"0",
"0",
"1",
"0"
],
[
"1",
"0",
"0",
"0",
"1",
"1",
"1",
"0",
"1",
"0",
"0",
"0",
"1",
"0",
"1",
"0",
"1",
"0",
"0",
"1"
],
[
"0",
"0",
"0",
"0",
"1",
"0",
"1",
"1",
"0",
"1",
"0",
"1",
"0",
"1",
"1",
"1",
"1",
"0",
"0",
"0"
],
[
"0",
"1",
"1",
"0",
"0",
"0",
"0",
"1",
"0",
"0",
"1",
"1",
"1",
"0",
"0",
"1",
"1",
"0",
"1",
"0"
],
[
"1",
"0",
"1",
"1",
"1",
"1",
"1",
"1",
"0",
"1",
"1",
"0",
"1",
"0",
"0",
"1",
"0",
"0",
"0",
"1"
],
[
"1",
"0",
"0",
"0",
"1",
"0",
"1",
"0",
"0",
"1",
"0",
"1",
"0",
"0",
"1",
"0",
"0",
"1",
"1",
"1"
],
[
"0",
"0",
"1",
"0",
"0",
"0",
"0",
"1",
"0",
"0",
"1",
"1",
"0",
"1",
"1",
"1",
"0",
"0",
"0",
"0"
],
[
"0",
"0",
"1",
"0",
"0",
"0",
"0",
"0",
"0",
"1",
"1",
"0",
"1",
"0",
"1",
"0",
"0",
"0",
"1",
"1"
],
[
"1",
"0",
"0",
"0",
"1",
"0",
"1",
"1",
"1",
"0",
"0",
"1",
"0",
"1",
"0",
"1",
"1",
"0",
"0",
"0"
]
])
